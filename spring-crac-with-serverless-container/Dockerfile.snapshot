FROM azul/zulu-openjdk:21-jdk-crac-latest as base
  
# Configure the build environment
FROM base as build
# Install maven
RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive \
    apt-get install -y sudo maven curl liblz4-tool \
 && apt-get clean \
  && rm -rf /var/lib/apt/lists/* 
 
#RUN apt-get update && \
      #apt-get -y install sudo maven

#RUN useradd -m docker && echo "docker:docker" | chpasswd && adduser docker sudo

 
RUN sudo chown root:root $JAVA_HOME/lib/criu
RUN sudo chmod u+s $JAVA_HOME/lib/criu

RUN curl -Lo aws-lambda-rie https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie \
&& chmod +x aws-lambda-rie

   
WORKDIR /src

# Cache and copy dependencies
ADD pom.xml .
RUN mvn dependency:go-offline dependency:copy-dependencies

# Compile the function
ADD . .
RUN mvn package 

RUN LIBJVM=$JAVA_HOME/lib/server/libjvm.so; \
	       lz4 -f -z -9 $LIBJVM $LIBJVM.lz4; \
	       rm -f $LIBJVM; \
	       ln -s /tmp/sub/$LIBJVM $LIBJVM

RUN umask 0002

RUN mkdir -p /tmp/sub/jdk/lib/server/
RUN lz4 -d $JAVA_HOME/lib/server/libjvm.so.lz4 /tmp/sub/jdk/lib/server/libjvm.so
RUN ln -s -t /tmp/sub/jdk/lib $JAVA_HOME/lib/



# Copy the function artifact and dependencies onto a clean base
FROM base
WORKDIR /function

ENV PATH=$PATH:/function
ENV LD_LIBRARY_PATH=/function

COPY --from=build /src/target/dependency/*.jar ./
COPY --from=build /src/target/*.jar ./

RUN /prepare-crac-jdk.cmd.sh ; \
	    $JAVA_HOME/bin/jar -x -f aws-lambda-java-runtime-interface-client*.jar \
		aws-lambda-runtime-interface-client.musl.so \
		aws-lambda-runtime-interface-client.glibc.so
	
		
ENV LD_LIBRARY_PATH=./aws-lambda-runtime-interface-client.musl.so:./aws-lambda-runtime-interface-client.glibc.so
ENV LD_PRELOAD=/function/aws-lambda-runtime-interface-client.glibc.so

ADD aws-lambda-rie /usr/local/bin/aws-lambda-rie
    
# Set runtime interface client as default command for the container runtime

COPY snapshot.cmd.sh /
ENTRYPOINT [ "/bin/bash", "/snapshot.cmd.sh" ]

# Set the CMD to your handler (could also be done as a parameter override outside of the Dockerfile)
CMD [ "software.amazonaws.example.product.handler.StreamLambdaHandler::handleRequest" ]